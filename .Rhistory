# Extração dos Metadados
# Aceder aos ficheiros dos metadados (formato .txt) presentes dentro da pasta "bladder_msk_2023"
setwd("bladder_msk_2023")
meta_cna_hg19_seg <- read.delim("meta_cna_hg19_seg.txt", sep = ":",
header = FALSE,
row.names = 1,
col.names = c("", "data")
)
meta_cna_hg19_seg
meta_cna <- read.delim("meta_cna.txt", sep = ":",
header = FALSE,
row.names = 1,
col.names = c("", "data")
)
meta_cna
# Metadados do estudo
meta_study <- read.delim("meta_study.txt", sep = ":",
header = FALSE,
row.names = 1,
col.names = c("", "data")
)
meta_study["citation", "data"] # Citação
install.packages("GGally")
install.packages("ggplot2")
library("ggplot2")
library("GGally")
ggpairs(bladder_clin, cardinality_threshold = 526) # Requer pacotes ggplots e GGally
# Verificar colunas com valores NA
# Check for missing values
colSums(is.na(bladder_clin))
# Print columns with missing values
print(colSums(is.na(bladder_clin))[colSums(is.na(bladder_clin)) > 0])
View(bladder_clin)
# Verificar colunas com valores NA
colSums(is.na(bladder_clin)) # Verifica quandos valores NA cada coluna tem
print(colSums(is.na(bladder_clin))[colSums(is.na(bladder_clin)) > 0]) # Mostra quais as colunas têm valores NA
# Get the column names of bladder_clin
column_names <- names(bladder_clin)
# Initialize an empty list to store numeric columns
numeric_columns <- c()
# Loop through each column and check if it contains numeric values
for (col in column_names) {
if (is.numeric(bladder_clin[[col]])) {
numeric_columns <- c(numeric_columns, col)
}
}
# Print the list of numeric columns
print(numeric_columns)
# Verificar colunas com valores NA
colSums(is.na(bladder_clin)) # Verifica quandos valores NA cada coluna tem
print(colSums(is.na(bladder_clin))[colSums(is.na(bladder_clin)) > 0]) # Mostra quais as colunas têm valores NA
# Get the column names of bladder_clin
column_names <- names(bladder_clin)
# Initialize an empty list to store numeric columns
numeric_columns <- c()
# Loop through each column and check if it contains numeric values
for (col in column_names) {
if (is.numeric(bladder_clin[[col]])) {
numeric_columns <- c(numeric_columns, col)
}
}
# Print the list of numeric columns
print(numeric_columns)
is.numeric(bladder_clin)
install.packages("GGally")
install.packages("ggplot2")
library("ggplot2")
library("GGally")
# Assuming bladder_clin is your dataset
# Subset the dataset to include only numeric columns
numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
# Create a pairplot with only numeric columns
ggpairs(numeric_data, cardinality_threshold = Inf)
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
# Assuming bladder_clin is your dataset
# Subset the dataset to include only numeric columns
numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
# Create a pairplot with only numeric columns
ggpairs(numeric_data, cardinality_threshold = Inf)
# Instalação e carregamento dos pacotes necessários
if (!require("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install(c("edgeR", "limma", "Glimma", "gplots", "org.Mm.eg.db", "RColorBrewer", "TCGAbiolinks", "DESeq2"))
# Carrega os pacotes instalados
library(edgeR)
library(limma)
library(Glimma)
library(gplots)
library(tidyverse)
library(ggplot2)
library(GGally)
library(org.Mm.eg.db)
library(RColorBrewer)
library(TCGAbiolinks)
library(DESeq2)
# Verifica se o BiocManager está instalado e instala se necessário
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Verifica se o pacote cBioPortalData está instalado e instala se necessário
if (!requireNamespace("cBioPortalData", quietly = TRUE))
BiocManager::install("cBioPortalData")
# Instalação do pacote "GGally"
install.packages("GGally", dependencies = TRUE, repos = "https://CRAN.R-project.org/")
# Carregamento do pacote cBioPortalData
library(cBioPortalData)
# Inicialização da API do cBioPortal
cbio <- cBioPortal()
install.packages("GGally", dependencies = TRUE, repos = "https://CRAN.R-project.org/")
knitr::opts_chunk$set(echo = TRUE)
# Assuming bladder_clin is your dataset
# Subset the dataset to include only numeric columns
numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
# Create a pairplot with only numeric columns
ggpairs(numeric_data, cardinality_threshold = Inf)
# Subset the dataset to include only numeric columns
numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
# Create a pairplot with only numeric columns
GGally::ggpairs(numeric_data, cardinality_threshold = Inf)
library("ggplot2")
library("GGally")
# Subset the dataset to include only numeric columns
numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
# Create a pairplot with only numeric columns
GGally::ggpairs(numeric_data, cardinality_threshold = Inf)
str(bladder_clin)
library("ggplot2")
library("GGally")
# Subset the dataset to include only numeric columns
numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
# Create a pairplot with only numeric columns
GGally::ggpairs(numeric_data, cardinality_threshold = Inf)
str(bladder_clin) # as colunas são todas do tipo chr (character)
install.packages("tibble") # Instala-se o pacote "tibble" para converter o tipo de colunas
library(tibble)
library(dplyr)
# Convert specific columns to numeric
bladder_clin <- bladder_clin %>%
mutate(
SEQUENCING_OS_MONTHS = as.numeric(SEQUENCING_OS_MONTHS),
AGE_AT_SEQ_REPORTED_YEARS = as.numeric(AGE_AT_SEQ_REPORTED_YEARS),
FRACTION_GENOME_ALTERED = as.numeric(FRACTION_GENOME_ALTERED),
MSI_SCORE = as.numeric(MSI_SCORE),
MUTATION_COUNT = as.numeric(MUTATION_COUNT),
SAMPLE_COVERAGE = as.numeric(SAMPLE_COVERAGE),
TMB_NONSYNONYMOUS = as.numeric(TMB_NONSYNONYMOUS),
TUMOR_PURITY = as.numeric(TUMOR_PURITY)
)
# library("ggplot2")
# library("GGally")
#
#
# # Subset the dataset to include only numeric columns
# numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
#
# # Create a pairplot with only numeric columns
# GGally::ggpairs(numeric_data, cardinality_threshold = Inf)
install.packages("tibble")
View(bladder_clin)
str(bladder_clin) # as colunas são todas do tipo chr (character)
install.packages("tibble") # Instala-se o pacote "tibble" para converter o tipo de colunas
library(tibble)
library(dplyr)
# Convert specific columns to numeric
bladder_clin <- bladder_clin %>%
mutate(
SEQUENCING_OS_MONTHS = as.numeric(SEQUENCING_OS_MONTHS),
AGE_AT_SEQ_REPORTED_YEARS = as.numeric(AGE_AT_SEQ_REPORTED_YEARS),
FRACTION_GENOME_ALTERED = as.numeric(FRACTION_GENOME_ALTERED),
MSI_SCORE = as.numeric(MSI_SCORE),
MUTATION_COUNT = as.numeric(MUTATION_COUNT),
SAMPLE_COVERAGE = as.numeric(SAMPLE_COVERAGE),
TMB_NONSYNONYMOUS = as.numeric(TMB_NONSYNONYMOUS),
TUMOR_PURITY = as.numeric(TUMOR_PURITY)
)
# library("ggplot2")
# library("GGally")
#
#
# # Subset the dataset to include only numeric columns
# numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
#
# # Create a pairplot with only numeric columns
# GGally::ggpairs(numeric_data, cardinality_threshold = Inf)
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
knitr::opts_chunk$set(echo = TRUE)
str(bladder_clin) # as colunas são todas do tipo chr (character)
# Detach all loaded packages
detach("package:ggplot2", unload = TRUE)
str(bladder_clin) # as colunas são todas do tipo chr (character)
# Detach all loaded packages
detach("package:ggplot2", unload = TRUE)
str(bladder_clin) # as colunas são todas do tipo chr (character)
# Detach all loaded packages
detach("package:ggplot2", unload = TRUE)
str(bladder_clin) # as colunas são todas do tipo chr (character)
# Install tibble package
install.packages("tibble") # Instala-se o pacote "tibble" para converter o tipo de colunas
library(tibble)
library(ggplot2)
library(GGally)
library(dplyr)
# Convert specific columns to numeric
bladder_clin <- bladder_clin %>%
mutate(
SEQUENCING_OS_MONTHS = as.numeric(SEQUENCING_OS_MONTHS),
AGE_AT_SEQ_REPORTED_YEARS = as.numeric(AGE_AT_SEQ_REPORTED_YEARS),
FRACTION_GENOME_ALTERED = as.numeric(FRACTION_GENOME_ALTERED),
MSI_SCORE = as.numeric(MSI_SCORE),
MUTATION_COUNT = as.numeric(MUTATION_COUNT),
SAMPLE_COVERAGE = as.numeric(SAMPLE_COVERAGE),
TMB_NONSYNONYMOUS = as.numeric(TMB_NONSYNONYMOUS),
TUMOR_PURITY = as.numeric(TUMOR_PURITY)
)
# library("ggplot2")
# library("GGally")
#
#
# # Subset the dataset to include only numeric columns
# numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
#
# # Create a pairplot with only numeric columns
# GGally::ggpairs(numeric_data, cardinality_threshold = Inf)
install.packages("tibble")
knitr::opts_chunk$set(echo = TRUE)
# Instalação e carregamento dos pacotes necessários
# Verifica se o BiocManager está instalado e instala se necessário
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Verifica se o pacote cBioPortalData está instalado e instala se necessário
if (!requireNamespace("cBioPortalData", quietly = TRUE))
BiocManager::install("cBioPortalData")
BiocManager::install(c("edgeR", "limma", "Glimma", "gplots", "org.Mm.eg.db", "RColorBrewer", "TCGAbiolinks", "DESeq2"))
# Instalação do pacote "GGally" e "tibble"
install.packages("GGally", dependencies = TRUE, repos = "https://CRAN.R-project.org/")
install.packages("tibble")
# Carrega os pacotes instalados
library(edgeR)
library(limma)
library(Glimma)
library(gplots)
library(tidyverse)
library(ggplot2)
library(GGally)
library(tibble)
library(org.Mm.eg.db)
library(RColorBrewer)
library(TCGAbiolinks)
library(DESeq2)
# Carregamento do pacote cBioPortalData
library(cBioPortalData)
# Inicialização da API do cBioPortal
cbio <- cBioPortal()
install.packages("tibble")
knitr::opts_chunk$set(echo = TRUE)
# Instalação e carregamento dos pacotes necessários
# Verifica se o BiocManager está instalado e instala se necessário
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Verifica se o pacote cBioPortalData está instalado e instala se necessário
if (!requireNamespace("cBioPortalData", quietly = TRUE))
BiocManager::install("cBioPortalData")
BiocManager::install(c("edgeR", "limma", "Glimma", "gplots", "org.Mm.eg.db", "RColorBrewer", "TCGAbiolinks", "DESeq2"))
# Instalação do pacote "GGally" e "tibble"
install.packages("GGally", dependencies = TRUE, repos = "https://CRAN.R-project.org/")
install.packages("tibble")
# Carrega os pacotes instalados
library(edgeR)
library(limma)
library(Glimma)
library(gplots)
library(tidyverse)
library(ggplot2)
library(GGally)
library(tibble)
library(org.Mm.eg.db)
library(RColorBrewer)
library(TCGAbiolinks)
library(DESeq2)
# Carregamento do pacote cBioPortalData
library(cBioPortalData)
# Inicialização da API do cBioPortal
cbio <- cBioPortal()
knitr::opts_chunk$set(echo = TRUE)
# Obter dados clínicos
bladder_clin <- clinicalData(api = cbio, studyId = "bladder_msk_2023")
# Instalação e carregamento dos pacotes necessários
# Verifica se o BiocManager está instalado e instala se necessário
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Verifica se o pacote cBioPortalData está instalado e instala se necessário
if (!requireNamespace("cBioPortalData", quietly = TRUE))
BiocManager::install("cBioPortalData")
BiocManager::install(c("edgeR", "limma", "Glimma", "gplots", "org.Mm.eg.db", "RColorBrewer", "TCGAbiolinks", "DESeq2"))
# Instalação dos pacotes "GGally" e "tibble"
install.packages("GGally", dependencies = TRUE, repos = "https://CRAN.R-project.org/")
install.packages("tibble")
# Carrega os pacotes instalados
library(edgeR)
library(limma)
library(Glimma)
library(gplots)
library(tidyverse)
library(ggplot2)
library(GGally)
library(tibble)
library(org.Mm.eg.db)
library(RColorBrewer)
library(TCGAbiolinks)
library(DESeq2)
# Carregamento do pacote cBioPortalData
library(cBioPortalData)
# Inicialização da API do cBioPortal
cbio <- cBioPortal()
install.packages("tibble")
# Obter dados clínicos
bladder_clin <- clinicalData(api = cbio, studyId = "bladder_msk_2023")
bladder_clin
dim(bladder_clin)  # Deve retornar 526 linhas e 29 colunas
# Carrega os dados do cBioPortal
bladder = cBioDataPack("bladder_msk_2023", ask = FALSE)
bladder
# Lista os nomes dos ensaios disponíveis no pacote dos dados do CBioPortal
names(assays(bladder))
# names(rowData(bladder)) # tipos de metadados associados a cada gene
# names(colData(bladder)) # tipos de metadados associados a cada amostra
# Summary dos dados
summary(bladder)
# Acessando os dados de cna e convertendo para um dataframe
dados_cna = assays(bladder)$cna
dados_cna_df = as.data.frame(dados_cna)
# Acessando os dados de cna_hg19 e convertendo para um dataframe
dados_cna_hg19 = assays(bladder)$cna_hg19.seg
dados_cna_hg19_df = as.data.frame(dados_cna_hg19)
# Acessando os dados de mutação e convertendo para um dataframe
dados_mutacao = assays(bladder)$mutations
dados_mutacao_df = as.data.frame(dados_mutacao)
# Extração dos Metadados
# Aceder aos ficheiros dos metadados (formato .txt) presentes dentro da pasta "bladder_msk_2023"
setwd("bladder_msk_2023")
meta_cna_hg19_seg <- read.delim("meta_cna_hg19_seg.txt", sep = ":",
header = FALSE,
row.names = 1,
col.names = c("", "data")
)
meta_cna_hg19_seg
meta_cna <- read.delim("meta_cna.txt", sep = ":",
header = FALSE,
row.names = 1,
col.names = c("", "data")
)
meta_cna
# Metadados do estudo
meta_study <- read.delim("meta_study.txt", sep = ":",
header = FALSE,
row.names = 1,
col.names = c("", "data")
)
meta_study["citation", "data"] # Citação
View(meta_study)
# Extração dos Metadados
# Aceder aos ficheiros dos metadados (formato .txt) presentes dentro da pasta "bladder_msk_2023"
setwd("bladder_msk_2023")
meta_cna_hg19_seg <- read.delim("meta_cna_hg19_seg.txt", sep = ":",
header = FALSE,
row.names = 1,
col.names = c("", "data")
)
meta_cna_hg19_seg
meta_cna <- read.delim("meta_cna.txt", sep = ":",
header = FALSE,
row.names = 1,
col.names = c("", "data")
)
meta_cna
# Metadados do estudo
meta_study <- read.delim("meta_study.txt", sep = ":",
header = FALSE,
row.names = 1,
col.names = c("", "data")
)
meta_study["citation", "data"] # Citação
meta_study["pmid", "data"] # pmid (PubMed ID), permite encontrar o artigo da qual originaram os dados
# Extração dos Metadados
# Aceder aos ficheiros dos metadados (formato .txt) presentes dentro da pasta "bladder_msk_2023"
setwd("bladder_msk_2023")
meta_cna_hg19_seg <- read.delim("meta_cna_hg19_seg.txt", sep = ":",
header = FALSE,
row.names = 1,
col.names = c("", "data")
)
meta_cna_hg19_seg
meta_cna <- read.delim("meta_cna.txt", sep = ":",
header = FALSE,
row.names = 1,
col.names = c("", "data")
)
meta_cna
# Metadados do estudo
meta_study <- read.delim("meta_study.txt", sep = ":",
header = FALSE,
row.names = 1,
col.names = c("", "data")
)
meta_study["citation","data"] # Citação
meta_study["pmid","data"] # pmid (PubMed ID), permite encontrar o artigo da qual originaram os dados
str(bladder_clin) # as colunas são todas do tipo chr (character)
library(dplyr)
# Convert specific columns to numeric
bladder_clin <- bladder_clin %>%
mutate(
SEQUENCING_OS_MONTHS = as.numeric(SEQUENCING_OS_MONTHS),
AGE_AT_SEQ_REPORTED_YEARS = as.numeric(AGE_AT_SEQ_REPORTED_YEARS),
FRACTION_GENOME_ALTERED = as.numeric(FRACTION_GENOME_ALTERED),
MSI_SCORE = as.numeric(MSI_SCORE),
MUTATION_COUNT = as.numeric(MUTATION_COUNT),
SAMPLE_COVERAGE = as.numeric(SAMPLE_COVERAGE),
TMB_NONSYNONYMOUS = as.numeric(TMB_NONSYNONYMOUS),
TUMOR_PURITY = as.numeric(TUMOR_PURITY)
)
# library("ggplot2")
# library("GGally")
#
#
# # Subset the dataset to include only numeric columns
# numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
#
# # Create a pairplot with only numeric columns
# GGally::ggpairs(numeric_data, cardinality_threshold = Inf)
View(bladder_clin)
str(bladder_clin) # as colunas são todas do tipo chr (character)
library(dplyr)
# Convert specific columns to numeric
bladder_clin <- bladder_clin %>%
mutate(
SEQUENCING_OS_MONTHS = as.numeric(SEQUENCING_OS_MONTHS),
AGE_AT_SEQ_REPORTED_YEARS = as.numeric(AGE_AT_SEQ_REPORTED_YEARS),
FRACTION_GENOME_ALTERED = as.numeric(FRACTION_GENOME_ALTERED),
MSI_SCORE = as.numeric(MSI_SCORE),
MUTATION_COUNT = as.numeric(MUTATION_COUNT),
SAMPLE_COVERAGE = as.numeric(SAMPLE_COVERAGE),
TMB_NONSYNONYMOUS = as.numeric(TMB_NONSYNONYMOUS),
TUMOR_PURITY = as.numeric(TUMOR_PURITY)
)
# Subset the dataset to include only numeric columns
numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
# Create a pairplot with only numeric columns
GGally::ggpairs(numeric_data, cardinality_threshold = Inf)
str(bladder_clin) # as colunas são todas do tipo chr (character)
library(dplyr)
# Convert specific columns to numeric
bladder_clin <- bladder_clin %>%
mutate(
SEQUENCING_OS_MONTHS = as.numeric(SEQUENCING_OS_MONTHS),
AGE_AT_SEQ_REPORTED_YEARS = as.numeric(AGE_AT_SEQ_REPORTED_YEARS),
FRACTION_GENOME_ALTERED = as.numeric(FRACTION_GENOME_ALTERED),
MSI_SCORE = as.numeric(MSI_SCORE),
MUTATION_COUNT = as.numeric(MUTATION_COUNT),
SAMPLE_COVERAGE = as.numeric(SAMPLE_COVERAGE),
TMB_NONSYNONYMOUS = as.numeric(TMB_NONSYNONYMOUS),
TUMOR_PURITY = as.numeric(TUMOR_PURITY)
)
# Subset the dataset to include only numeric columns
numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
# Create a pairplot with only numeric columns
pairplot <- GGally::ggpairs(numeric_data, cardinality_threshold = Inf)
pairplot
View(pairplot)
str(bladder_clin) # as colunas são todas do tipo chr (character)
library(dplyr)
# Convert specific columns to numeric
bladder_clin <- bladder_clin %>%
mutate(
SEQUENCING_OS_MONTHS = as.numeric(SEQUENCING_OS_MONTHS),
AGE_AT_SEQ_REPORTED_YEARS = as.numeric(AGE_AT_SEQ_REPORTED_YEARS),
FRACTION_GENOME_ALTERED = as.numeric(FRACTION_GENOME_ALTERED),
MSI_SCORE = as.numeric(MSI_SCORE),
MUTATION_COUNT = as.numeric(MUTATION_COUNT),
SAMPLE_COVERAGE = as.numeric(SAMPLE_COVERAGE),
TMB_NONSYNONYMOUS = as.numeric(TMB_NONSYNONYMOUS),
TUMOR_PURITY = as.numeric(TUMOR_PURITY)
)
# Subset the dataset to include only numeric columns
numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
# Create a pairplot with only numeric columns
pairplot <- GGally::ggpairs(numeric_data, cardinality_threshold = Inf)
print(pairplot)
View(pairplot)
str(bladder_clin) # as colunas são todas do tipo chr (character)
library(dplyr)
# Convert specific columns to numeric
bladder_clin <- bladder_clin %>%
mutate(
SEQUENCING_OS_MONTHS = as.numeric(SEQUENCING_OS_MONTHS),
AGE_AT_SEQ_REPORTED_YEARS = as.numeric(AGE_AT_SEQ_REPORTED_YEARS),
FRACTION_GENOME_ALTERED = as.numeric(FRACTION_GENOME_ALTERED),
MSI_SCORE = as.numeric(MSI_SCORE),
MUTATION_COUNT = as.numeric(MUTATION_COUNT),
SAMPLE_COVERAGE = as.numeric(SAMPLE_COVERAGE),
TMB_NONSYNONYMOUS = as.numeric(TMB_NONSYNONYMOUS),
TUMOR_PURITY = as.numeric(TUMOR_PURITY)
)
# Subset the dataset to include only numeric columns
numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
# Create a pairplot with only numeric columns
pairplot <- GGally::ggpairs(numeric_data, cardinality_threshold = Inf)
pairplot
ggsave("pairplot.png", pairplot) # Guarda o pairplot como uma imagem .png no working directory
