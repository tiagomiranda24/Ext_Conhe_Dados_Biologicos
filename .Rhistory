PATH_M_STAGE = as.factor(PATH_M_STAGE),
PATH_N_STAGE = as.factor(PATH_N_STAGE),
PATH_T_STAGE = as.factor(PATH_T_STAGE),
RACE = as.factor(RACE)
)
# Estudando as colunas, verifica-se que as colunas "SAMPLE_COUNT", "CANCER_TYPE", "CANCER_TYPE_DETAILED", "ONCOTREE_CODE" e "SOMATIC_STATUS" têm sempre 1 único valor cada, logo serão removidas.
bladder_clin <- subset(bladder_clin, select = -c(SAMPLE_COUNT, CANCER_TYPE, CANCER_TYPE_DETAILED, ONCOTREE_CODE, SOMATIC_STATUS))
# Verificar se ainda há valores NA
summary(bladder_clin)
# Para saber se a substituição dos NAs ocorreu, verifica os resultados do "summary(bladder_clin)", se ainda aparecerem "NA's", algo está mal, se não houverem "NA's" nas colunas numéricas e houverem valores "Unknown" nas colunas não numéricas, está tudo certo!
### Aqui vamos observar os estados, distribuições e correlações dos nossos dados, incluindo entender o que podemos fazer para normalização dos dados. ###
# Pairplot para ver os gráficos das correlações possíveis entre colunas
# Subconjunto do conjunto de dados para apenas incluir as colunas numéricas
numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
# Criação de um pairplot com só as colunas numéricas para verificar as correlações
pairplot1 <- GGally::ggpairs(numeric_data, cardinality_threshold = Inf,
upper = list(continuous = wrap("cor", size = 2, color = "brown")),
lower = list(continuous = wrap("points", size = 0.25, color = "dodgerblue3"))) +
theme(text = element_text(size = 4),
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(size = 4),
panel.spacing = unit(0.1, "lines")) # Ajusta espaços entre os gráficos/painéis
pairplot1
ggsave("pairplot1.png", pairplot1, width = 10, height = 6) # Guarda o pairplot como uma imagem .png no working directory. Os parâmetros "width" e "height" definem o tamanho dele, caso queiram ver o pairplot, ele está disponível na mesma pasta que este ficheiro .Rmd!
### Aqui vamos observar os estados, distribuições e correlações dos nossos dados, incluindo entender o que podemos fazer para normalização dos dados. ###
# Pairplot para ver os gráficos das correlações possíveis entre colunas
# Subconjunto do conjunto de dados para apenas incluir as colunas numéricas
numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
# Criação de um pairplot com só as colunas numéricas para verificar as correlações
pairplot1 <- GGally::ggpairs(numeric_data, cardinality_threshold = Inf,
upper = list(continuous = wrap("cor", size = 2, color = "brown")),
lower = list(continuous = wrap("points", size = 0.25, color = "dodgerblue3"))) +
theme(text = element_text(size = 4),
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(size = 4),
panel.spacing = unit(0.1, "lines")) # Ajusta espaços entre os gráficos/painéis
pairplot1
ggsave("pairplot_prenorm.png", pairplot1, width = 10, height = 6) # Guarda o pairplot como uma imagem .png no working directory. Os parâmetros "width" e "height" definem o tamanho dele, caso queiram ver o pairplot, ele está disponível na mesma pasta que este ficheiro .Rmd!
### Se corrermos este código antes de definir as variáveis numéricas, o tratamento dos NA's não ocorre! ###
# Vamos fazer a normalização dos dados fazendo primeiro a logaritmização dos dados e depois aplicar o Min-Max Scaling para os valores dos nossos dados serem positivos.
# Colunas numéricas que vão ser normalizadas
cols_norm <- c("RAGNUM_HYPOXIA_SCORE", "WINTER_HYPOXIA_SCORE", "DFS_MONTHS",
"FRACTION_GENOME_ALTERED", "MSI_SCORE_MANTIS",
"MSI_SENSOR_SCORE", "MUTATION_COUNT", "TMB_NONSYNONYMOUS",
"OS_MONTHS", "PFS_MONTHS")
# Logaritmização das colunas numéricas
bladder_clin <- bladder_clin %>%
mutate(across(all_of(cols_norm), ~ if(all(. >= 0)) log(. + 1) else .)) # RStudio presume que os parêntesis estão errados apesar de estarem bem, isto deve-se ao comando "if", substituindo por "if_else" corrige este problema mas com a consequência de dar erros maiores nas transformações, logo mantém-se assim até arranjarmos uma nova solução...
# Aplicação do Min-Max Scaling (definido anteriormente) às colunas numéricas
bladder_clin <- bladder_clin %>%
mutate(across(where(is.numeric), min_max_scaling))
# Aplicada a logaritmização e min-max scaling aos dados mRNA
dados_mrna_df <- as.data.frame(assays(bladder)$mrna_seq_v2_rsem) %>%
mutate(across(where(is.numeric), min_max_scaling))
# Vamos voltar a fazer o pairplot depois de termos feito a normalização dos dados...
# As colunas resultantes neste pairplot foram transformadas!
# Este código é uma repetição do código anterior do pairplot1, mas estamos a definir como um novo "pairplot2" para fazer a comparação
numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
pairplot2 <- GGally::ggpairs(numeric_data, cardinality_threshold = Inf,
upper = list(continuous = wrap("cor", size = 2, color = "brown")),
lower = list(continuous = wrap("points", size = 0.25, color = "dodgerblue3"))) +
theme(text = element_text(size = 4),
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(size = 4),
panel.spacing = unit(0.1, "lines"))
pairplot2
ggsave("pairplot_norm.png", pairplot2, width = 10, height = 6)
# Define o projeto
project <- "TCGA-ACC"
# Configura a consulta com o tipo de amostra correto
query <- GDCquery(project = project,
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts",
sample.type = "Primary Tumor")
# Baixa os dados
GDCdownload(query)
# Prepara os dados para análise
data <- GDCprepare(query)
View(query)
# List all .tsv files in the directory
file_list <- list.files(path = "data_files", pattern = "\\.tsv$", full.names = TRUE)
# Load the .tsv files into a list
data_list <- lapply(file_list, read.table, header = TRUE, sep = "\t")
# List all .tsv files in the directory
file_list <- list.files(path = "data_files", pattern = "\\.tsv$", full.names = TRUE)
# Load the .tsv files into a list
data_list <- lapply(file_list, read.table, header = TRUE, sep = "\t", fill = TRUE)
# Combine the data frames into a single data frame
data <- do.call(rbind, data_list)
# List all .tsv files in the directory
file_list <- list.files(path = "data_files", pattern = "\\.tsv$", full.names = TRUE)
# Load the .tsv files into a list, ensuring consistent column names
data_list <- lapply(file_list, function(file) {
# Read the file
data <- read.table(file, header = TRUE, sep = "\t", fill = TRUE)
# Ensure consistent column names
colnames(data) <- make.unique(colnames(data))
return(data)
})
# Combine the data frames into a single data frame
data <- do.call(rbind, data_list)
# List all .tsv files in the directory
file_list <- list.files(path = "data_files", pattern = "\\.tsv$", full.names = TRUE)
# Load the .tsv files into a list
data_list <- lapply(file_list, function(file) {
# Read the file
data <- tryCatch(
read.table(file, header = TRUE, sep = "\t", fill = TRUE),
error = function(e) {
# Print an error message indicating which file caused the error
cat("Error reading file:", file, "\n")
return(NULL) # Return NULL to indicate failure
}
)
return(data)
})
# Remove NULL elements (files that couldn't be read)
data_list <- data_list[!sapply(data_list, is.null)]
# Check if all data frames have the same number of columns
if (!all.equal(lengths(lapply(data_list, names)), lengths(lapply(data_list, names))[1])) {
stop("Not all data frames have the same number of columns.")
}
# List all .tsv files in the directory
file_list <- list.files(path = "data_files", pattern = "\\.tsv$", full.names = TRUE)
# Load the .tsv files into a list
data_list <- lapply(file_list, function(file) {
# Read the file
data <- tryCatch(
read.table(file, header = TRUE, sep = "\t", fill = TRUE),
error = function(e) {
# Print an error message indicating which file caused the error
cat("Error reading file:", file, "\n")
return(NULL) # Return NULL to indicate failure
}
)
return(data)
})
# Remove NULL elements (files that couldn't be read)
data_list <- data_list[!sapply(data_list, is.null)]
# Check if all data frames have the same number of columns
num_cols <- sapply(data_list, ncol)
if (!all(num_cols == num_cols[1])) {
stop("Not all data frames have the same number of columns.")
}
# List all .tsv files in the directory
file_list <- list.files(path = "data_files", pattern = "\\.tsv$", full.names = TRUE)
# Load the .tsv files into a list
data_list <- lapply(file_list, function(file) {
# Read the file
data <- tryCatch(
read.table(file, header = TRUE, sep = "\t", fill = TRUE),
error = function(e) {
# Print an error message indicating which file caused the error
cat("Error reading file:", file, "\n")
return(NULL) # Return NULL to indicate failure
}
)
return(data)
})
# Remove NULL elements (files that couldn't be read)
data_list <- data_list[!sapply(data_list, is.null)]
# Check if all data frames have the same number of columns
num_cols <- sapply(data_list, ncol)
if (!all(num_cols == num_cols[1])) {
stop("Not all data frames have the same number of columns.")
}
# List all .tsv files in the directory
file_list <- list.files(path = "data_files", pattern = "\\.tsv$", full.names = TRUE)
# Load the .tsv files into a list
data_list <- lapply(file_list, function(file) {
# Read the file
data <- tryCatch(
read.table(file, header = TRUE, sep = "\t", fill = TRUE),
error = function(e) {
# Print an error message indicating which file caused the error
cat("Error reading file:", file, "\n")
return(NULL) # Return NULL to indicate failure
}
)
return(data)
})
# Remove NULL elements (files that couldn't be read)
data_list <- data_list[!sapply(data_list, is.null)]
# Check if all data frames have the same number of columns
for (i in seq_along(data_list)) {
cat("Number of columns in data frame", i, ":", ncol(data_list[[i]]), "\n")
}
# Combine the data frames into a single data frame
data <- do.call(rbind, data_list)
setwd("GDCdata")
setwd("GDCdata")
# Define o projeto
project <- "TCGA-ACC"
# Configura a consulta com o tipo de amostra correto
query <- GDCquery(project = project,
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts",
sample.type = "Primary Tumor")
# Baixa os dados
GDCdownload(query)
# Prepara os dados para análise
data <- GDCprepare(query)
colData(data)
# Análise de Expressão Diferencial:
library(DESeq2)
# Suponho que o nome do ensaio correto seja o "unstranded"
dds <- DESeqDataSetFromMatrix(countData = assay(data, "unstranded"),
colData = colData(data),
design = ~ gender)  # Ou outra variável de interesse
getGDCprojects()
gdcprojects <- getGDCprojects()
View(gdcprojects)
getProjectSummary("TCGA-ACC")
View(query)
output_query <- getResults(query)
View(output_query)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Instalação dos pacotes necessários
### Só é necessário correr este código se os pacotes ainda não foram instalados ou se estão desatualizados! Caso já estejam, podem saltar para o carregamento dos pacotes! ###
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("cBioPortalData", "edgeR", "limma", "Glimma", "gplots", "org.Mm.eg.db", "org.Hs.eg.db", "TCGAbiolinks", "DESeq2", "clusterProfiler", "EnhancedVolcano"), ask = FALSE)
if (!requireNamespace("GGally", quietly = TRUE))
install.packages("GGally", dependencies = TRUE, repos = "https://CRAN.R-project.org/")
if (!requireNamespace("rentrez", quietly = TRUE))
install.packages("rentrez")
# Carregamento dos pacotes
library(cBioPortalData)
library(edgeR)
library(limma)
library(DESeq2)
library(GGally)
library(dplyr)
library(tibble)
library(TCGAbiolinks)
library(clusterProfiler)
library(org.Hs.eg.db)
library(EnhancedVolcano)
library(pheatmap)
library(rentrez)
## Inicialização do API cBioPortal e obtenção dos dados do estudo "blca_msk_tcga_2020"
# Automáticamente define a working directory para o local deste ficheiro .Rmd
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Inicialização da API do cBioPortal
cbio <- cBioPortal()
# Obter dados clínicos
bladder_clin <- clinicalData(api = cbio, studyId = "blca_msk_tcga_2020")
dim(bladder_clin)  # Deve retornar 476 linhas e 42 colunas
# Carrega os dados do cBioPortal
bladder = cBioDataPack("blca_msk_tcga_2020", ask = FALSE)
# Lista os nomes dos ensaios disponíveis no pacote dos dados do CBioPortal
names(assays(bladder))
names(colData(bladder)) # tipos de metadados associados a cada amostra
# Summary dos dados
summary(bladder)
# Informações (Descrição, citação e PubMed ID do artigo) presentes no ficheiro "meta_study.txt"
meta_study <- read.delim("blca_msk_tcga_2020\\meta_study.txt", sep = ":",
header = FALSE,
row.names = 1,
col.names = c("", "data")
)
meta_study$data <- trimws(meta_study$data) # Remove leading spaces na coluna "data"
meta_study["description", "data"] # Descrição
meta_study["citation", "data"]    # Citação
meta_study["pmid", "data"]        # pmid (PubMed ID), permite encontrar o artigo da qual originaram os dados
# Função para obter o número DOI do artigo a partir do PubMed ID
get_doi_blca <- function(pubmed_id) {
record <- entrez_fetch(db = "pubmed", id = pubmed_id, rettype = "abstract")
doi_blca <- sub(".*doi: (10\\.\\d+/[^ \\n\\\"]*).*", "doi: \\1", record)
doi_blca <- gsub("\\.$", "", doi_blca)
return(doi_blca)
}
# Obter o número DOI
pubmed_id <- meta_study["pmid", "data"]
doi_blca <- get_doi_blca(pubmed_id)
print(doi_blca)
# Consulta dos dados de mrna e conversão em dataframe.
min_max_scaling <- function(x) {
if(all(is.na(x)) || length(unique(na.omit(x))) == 1) {
return(rep(0, length(x)))  # Retorna zeros se os valores forem NA ou iguais
}
min_val <- min(x, na.rm = TRUE)
max_val <- max(x, na.rm = TRUE)
return((x - min_val) / (max_val - min_val))
}
# sem o min e max scaling nesta parte ocorre erro no mutate que se segue:
dados_mrna_df <- as.data.frame(assays(bladder)$mrna_seq_v2_rsem) %>%
mutate(across(where(is.numeric), min_max_scaling))
knitr::opts_chunk$set(echo = TRUE)
# Carregamento dos pacotes
library(cBioPortalData)
library(edgeR)
library(limma)
library(DESeq2)
library(GGally)
library(dplyr)
library(tibble)
library(TCGAbiolinks)
library(clusterProfiler)
library(org.Hs.eg.db)
library(EnhancedVolcano)
library(pheatmap)
library(rentrez)
## Inicialização do API cBioPortal e obtenção dos dados do estudo "blca_msk_tcga_2020"
# Automáticamente define a working directory para o local deste ficheiro .Rmd
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Inicialização da API do cBioPortal
cbio <- cBioPortal()
# Obter dados clínicos
bladder_clin <- clinicalData(api = cbio, studyId = "blca_msk_tcga_2020")
dim(bladder_clin)  # Deve retornar 476 linhas e 42 colunas
# Carrega os dados do cBioPortal
bladder = cBioDataPack("blca_msk_tcga_2020", ask = FALSE)
# Lista os nomes dos ensaios disponíveis no pacote dos dados do CBioPortal
names(assays(bladder))
names(colData(bladder)) # tipos de metadados associados a cada amostra
# Summary dos dados
summary(bladder)
# Informações (Descrição, citação e PubMed ID do artigo) presentes no ficheiro "meta_study.txt"
meta_study <- read.delim("blca_msk_tcga_2020\\meta_study.txt", sep = ":",
header = FALSE,
row.names = 1,
col.names = c("", "data")
)
meta_study$data <- trimws(meta_study$data) # Remove leading spaces na coluna "data"
meta_study["description", "data"] # Descrição
meta_study["citation", "data"]    # Citação
meta_study["pmid", "data"]        # pmid (PubMed ID), permite encontrar o artigo da qual originaram os dados
# Função para obter o número DOI do artigo a partir do PubMed ID
get_doi_blca <- function(pubmed_id) {
record <- entrez_fetch(db = "pubmed", id = pubmed_id, rettype = "abstract")
doi_blca <- sub(".*doi: (10\\.\\d+/[^ \\n\\\"]*).*", "doi: \\1", record)
doi_blca <- gsub("\\.$", "", doi_blca)
return(doi_blca)
}
# Obter o número DOI
pubmed_id <- meta_study["pmid", "data"]
doi_blca <- get_doi_blca(pubmed_id)
print(doi_blca)
# Consulta dos dados de mrna e conversão em dataframe.
min_max_scaling <- function(x) {
if(all(is.na(x)) || length(unique(na.omit(x))) == 1) {
return(rep(0, length(x)))  # Retorna zeros se os valores forem NA ou iguais
}
min_val <- min(x, na.rm = TRUE)
max_val <- max(x, na.rm = TRUE)
return((x - min_val) / (max_val - min_val))
}
# sem o min e max scaling nesta parte ocorre erro no mutate que se segue:
dados_mrna_df <- as.data.frame(assays(bladder)$mrna_seq_v2_rsem) %>%
mutate(across(where(is.numeric), min_max_scaling))
unlist(lapply(bladder_clin, class))  # Verifica as classes das colunas do conjunto de dados
unlist(lapply(bladder_clin, typeof)) # Verifica os tipos das colunas do conjunto de dados
# Conversão de colunas que possuem valores numéricos (no entanto não são) para serem numéricas
# Definir as variáveis como numéricas
bladder_clin <- bladder_clin %>%
mutate(
RAGNUM_HYPOXIA_SCORE = as.numeric(RAGNUM_HYPOXIA_SCORE),
WINTER_HYPOXIA_SCORE = as.numeric(WINTER_HYPOXIA_SCORE),
DFS_MONTHS = as.numeric(DFS_MONTHS),
ANEUPLOIDY_SCORE = as.numeric(ANEUPLOIDY_SCORE),
FRACTION_GENOME_ALTERED = as.numeric(FRACTION_GENOME_ALTERED),
MSI_SCORE_MANTIS = as.numeric(MSI_SCORE_MANTIS),
MSI_SENSOR_SCORE = as.numeric(MSI_SENSOR_SCORE),
MUTATION_COUNT = as.numeric(MUTATION_COUNT),
TMB_NONSYNONYMOUS = as.numeric(TMB_NONSYNONYMOUS),
AGE = as.numeric(AGE),
BUFFA_HYPOXIA_SCORE = as.numeric(BUFFA_HYPOXIA_SCORE),
OS_MONTHS = as.numeric(OS_MONTHS),
PFS_MONTHS = as.numeric(PFS_MONTHS),
#SAMPLE_COUNT = as.numeric(SAMPLE_COUNT),
)
# Vamos substituir os NAs das colunas numéricas pela mediana de cada coluna e os NAs das não numéricas por "Unknown". Define-se primeiro as colunas numéricas para conseguirmos correr o nosso código de substituição dos NAs.
# Substituição dos NAs
na_columns <- sapply(bladder_clin, function(x) any(is.na(x)))
for (col_name in names(bladder_clin)) {
if (na_columns[col_name]) {
if (is.numeric(bladder_clin[[col_name]])) {
median_val <- median(bladder_clin[[col_name]], na.rm = TRUE)
bladder_clin[[col_name]][is.na(bladder_clin[[col_name]])] <- median_val
} else {
bladder_clin[[col_name]][is.na(bladder_clin[[col_name]])] <- "Unknown"
}
}
}
# Tendo os NAs substituidos, podemos agora definir variáveis como fatores:
# Definir as variáveis como fatores
bladder_clin <- bladder_clin %>%
mutate(
PFS_STATUS = as.factor(PFS_STATUS),
PRIOR_DX = as.factor(PRIOR_DX),
RADIATION_THERAPY = as.factor(RADIATION_THERAPY),
SEX = as.factor(SEX),
DFS_STATUS = as.factor(DFS_STATUS),
sampleId = as.factor(sampleId),
ANALYSIS_COHORT = as.factor(ANALYSIS_COHORT),
#CANCER_TYPE = as.factor(CANCER_TYPE),
#CANCER_TYPE_DETAILED = as.factor(CANCER_TYPE_DETAILED),
DISTANT_METS = as.factor(DISTANT_METS),
GRADE = as.factor(GRADE),
LYMPH_NODE_STATUS = as.factor(LYMPH_NODE_STATUS),
#ONCOTREE_CODE = as.factor(ONCOTREE_CODE),
PRIMARY_VS_SECONDARY = as.factor(PRIMARY_VS_SECONDARY),
PRIOR_INTRAVESICAL_CHEMOTHERAPY = as.factor(PRIOR_INTRAVESICAL_CHEMOTHERAPY),
SAMPLE_TYPE = as.factor(SAMPLE_TYPE),
#SOMATIC_STATUS = as.factor(SOMATIC_STATUS),
TUMOR_STAGE = as.factor(TUMOR_STAGE),
AJCC_PATHOLOGIC_TUMOR_STAGE = as.factor(AJCC_PATHOLOGIC_TUMOR_STAGE),
COHORT = as.factor(COHORT),
ETHNICITY = as.factor(ETHNICITY),
OS_STATUS = as.factor(OS_STATUS),
PATH_M_STAGE = as.factor(PATH_M_STAGE),
PATH_N_STAGE = as.factor(PATH_N_STAGE),
PATH_T_STAGE = as.factor(PATH_T_STAGE),
RACE = as.factor(RACE)
)
# Estudando as colunas, verifica-se que as colunas "SAMPLE_COUNT", "CANCER_TYPE", "CANCER_TYPE_DETAILED", "ONCOTREE_CODE" e "SOMATIC_STATUS" têm sempre 1 único valor cada, logo serão removidas.
bladder_clin <- subset(bladder_clin, select = -c(SAMPLE_COUNT, CANCER_TYPE, CANCER_TYPE_DETAILED, ONCOTREE_CODE, SOMATIC_STATUS))
# Verificar se ainda há valores NA
summary(bladder_clin)
# Para saber se a substituição dos NAs ocorreu, verifica os resultados do "summary(bladder_clin)", se ainda aparecerem "NA's", algo está mal, se não houverem "NA's" nas colunas numéricas e houverem valores "Unknown" nas colunas não numéricas, está tudo certo!
### Aqui vamos observar os estados, distribuições e correlações dos nossos dados, incluindo entender o que podemos fazer para normalização dos dados. ###
# Pairplot PRE-NOMALIZAÇÃO para ver os gráficos das correlações possíveis entre colunas
# Subconjunto do conjunto de dados para apenas incluir as colunas numéricas
numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
# Criação de um pairplot com só as colunas numéricas para verificar as correlações
pairplot1 <- GGally::ggpairs(numeric_data, cardinality_threshold = Inf,
upper = list(continuous = wrap("cor", size = 2, color = "brown")),
lower = list(continuous = wrap("points", size = 0.25, color = "dodgerblue3"))) +
theme(text = element_text(size = 4),
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(size = 4),
panel.spacing = unit(0.1, "lines")) # Ajusta espaços entre os gráficos/painéis
pairplot1 # Pairplot PRE-NORMALIZAÇÃO
ggsave("pairplot1.png", pairplot1, width = 10, height = 6) # Guarda o pairplot como uma imagem .png no working directory. Os parâmetros "width" e "height" definem o tamanho dele, caso queiram ver o pairplot, ele está disponível na mesma pasta que este ficheiro .Rmd!
### Se corrermos este código antes de definir as variáveis numéricas, o tratamento dos NA's não ocorre! ###
# Vamos fazer a normalização dos dados fazendo primeiro a logaritmização dos dados e depois aplicar o Min-Max Scaling para os valores dos nossos dados serem positivos.
# Colunas numéricas que vão ser normalizadas
cols_norm <- c("RAGNUM_HYPOXIA_SCORE", "WINTER_HYPOXIA_SCORE", "DFS_MONTHS",
"FRACTION_GENOME_ALTERED", "MSI_SCORE_MANTIS",
"MSI_SENSOR_SCORE", "MUTATION_COUNT", "TMB_NONSYNONYMOUS",
"OS_MONTHS", "PFS_MONTHS")
# Logaritmização das colunas numéricas
bladder_clin <- bladder_clin %>%
mutate(across(all_of(cols_norm), ~ if(all(. >= 0)) log(. + 1) else .)) # RStudio presume que os parêntesis estão errados apesar de estarem bem, isto deve-se ao comando "if". Se metermos "if_else", o "erro" desaparece mas consequentemente obtêm-se erros nas transformações, logo mantém-se assim até arranjarmos uma nova solução...
# Aplicação do Min-Max Scaling (definido anteriormente) às colunas numéricas
bladder_clin <- bladder_clin %>%
mutate(across(where(is.numeric), min_max_scaling))
# Aplicada a logaritmização e min-max scaling aos dados mRNA
dados_mrna_df <- as.data.frame(assays(bladder)$mrna_seq_v2_rsem) %>%
mutate(across(where(is.numeric), min_max_scaling))
# Vamos voltar a fazer o pairplot depois de termos feito a normalização dos dados...
# As colunas resultantes neste pairplot foram transformadas!
# Pairplot PÓS-NOMARLIZAÇÃO (repetição do código do pairplot1, mas definido como "pairplot2" para fazermos comparações)
numeric_data <- bladder_clin[, sapply(bladder_clin, is.numeric)]
pairplot2 <- GGally::ggpairs(numeric_data, cardinality_threshold = Inf,
upper = list(continuous = wrap("cor", size = 2, color = "brown")),
lower = list(continuous = wrap("points", size = 0.25, color = "dodgerblue3"))) +
theme(text = element_text(size = 4),
axis.text.x = element_text(angle = 45, hjust = 1),
strip.text = element_text(size = 4),
panel.spacing = unit(0.1, "lines"))
pairplot2 # Pairplot PÓS-NORMALIZAÇÃO
ggsave("pairplot2.png", pairplot2, width = 10, height = 6)
### Pie Charts
## Código para fazer o plot pie chart de CADA UMA das colunas categóricas
# Definição dos títulos de cada piechart
plot_titles <- c(
"Overall Survival Status",                # OS_STATUS
"Sex",                                    # SEX
"Ethnicity Category",                     # ETHNICITY
"Race Category",                          # RACE
"AJCC Metastasis Stage Code",             # PATH_M_STAGE
"AJCC Neoplasm Disease Lymph Node Stage", # PATH_N_STAGE
"AJCC Neoplasm Disease Stage",            # AJCC_PATHOLOGIC_TUMOR_STAGE
"AJCC Tumor Stage",                       # PATH_T_STAGE
"Analysis Cohort"                         # ANALYSIS_COHORT
)
# Definição das frequências e das frequências relativas
freq_list <- list(
OS_STATUS = prop.table(table(bladder_clin$OS_STATUS)),
SEX = prop.table(table(bladder_clin$SEX)),
ETHNICITY = prop.table(table(bladder_clin$ETHNICITY)),
RACE = prop.table(table(bladder_clin$RACE)),
PATH_M_STAGE = prop.table(table(bladder_clin$PATH_M_STAGE)),
PATH_N_STAGE = prop.table(table(bladder_clin$PATH_N_STAGE)),
AJCC_PATHOLOGIC_TUMOR_STAGE = prop.table(table(bladder_clin$AJCC_PATHOLOGIC_TUMOR_STAGE)),
PATH_T_STAGE = prop.table(table(bladder_clin$PATH_T_STAGE)),
ANALYSIS_COHORT = prop.table(table(bladder_clin$ANALYSIS_COHORT))
)
# Criação de um dataframe com as frequências e os nomes das colunas
pie_data <- lapply(freq_list, function(freq_rel) {
data.frame(labels = names(freq_rel), values = as.numeric(freq_rel))
})
# Criação dos pie charts
for (i in seq_along(plot_titles)) {
plot <- ggplot(pie_data[[i]], aes(x = "", y = values, fill = labels)) +
geom_bar(stat = "identity", width = 1) +
geom_text(aes(label = paste(round(freq_list[[i]] * 100, 2), "%")), position = position_stack(vjust = 0.5)) +
coord_polar("y", start = 0) +
labs(title = plot_titles[i], fill = "") +
theme_void() +
theme(
legend.position = "left",
plot.title = element_text(hjust = 0.5),
plot.margin = margin(1)
)
print(plot)
}
