PFS_STATUS = as.factor(PFS_STATUS),
PRIOR_DX = as.factor(PRIOR_DX),
RADIATION_THERAPY = as.factor(RADIATION_THERAPY),
SEX = as.factor(SEX),
DFS_STATUS = as.factor(DFS_STATUS),
sampleId = as.factor(sampleId),
ANALYSIS_COHORT = as.factor(ANALYSIS_COHORT),
CANCER_TYPE = as.factor(CANCER_TYPE),
CANCER_TYPE_DETAILED = as.factor(CANCER_TYPE_DETAILED),
DISTANT_METS = as.factor(DISTANT_METS),
GRADE = as.factor(GRADE),
LYMPH_NODE_STATUS = as.factor(LYMPH_NODE_STATUS),
ONCOTREE_CODE = as.factor(ONCOTREE_CODE),
PRIMARY_VS_SECONDARY = as.factor(PRIMARY_VS_SECONDARY),
PRIOR_INTRAVESICAL_CHEMOTHERAPY = as.factor(PRIOR_INTRAVESICAL_CHEMOTHERAPY),
SAMPLE_TYPE = as.factor(SAMPLE_TYPE),
SOMATIC_STATUS = as.factor(SOMATIC_STATUS),
TUMOR_STAGE = as.factor(TUMOR_STAGE),
AJCC_PATHOLOGIC_TUMOR_STAGE = as.factor(AJCC_PATHOLOGIC_TUMOR_STAGE),
COHORT = as.factor(COHORT),
ETHNICITY = as.factor(ETHNICITY),
OS_STATUS = as.factor(OS_STATUS),
PATH_M_STAGE = as.factor(PATH_M_STAGE),
PATH_N_STAGE = as.factor(PATH_N_STAGE),
PATH_T_STAGE = as.factor(PATH_T_STAGE),
RACE = as.factor(RACE)
)
# Definir as variáveis como numéricas
bladder_clin <- bladder_clin %>%
mutate(
RAGNUM_HYPOXIA_SCORE = as.numeric(RAGNUM_HYPOXIA_SCORE),
WINTER_HYPOXIA_SCORE = as.numeric(WINTER_HYPOXIA_SCORE),
DFS_MONTHS = as.numeric(DFS_MONTHS),
ANEUPLOIDY_SCORE = as.numeric(ANEUPLOIDY_SCORE),
FRACTION_GENOME_ALTERED = as.numeric(FRACTION_GENOME_ALTERED),
MSI_SCORE_MANTIS = as.numeric(MSI_SCORE_MANTIS),
MSI_SENSOR_SCORE = as.numeric(MSI_SENSOR_SCORE),
MUTATION_COUNT = as.numeric(MUTATION_COUNT),
TMB_NONSYNONYMOUS = as.numeric(TMB_NONSYNONYMOUS),
AGE = as.numeric(AGE),
BUFFA_HYPOXIA_SCORE = as.numeric(BUFFA_HYPOXIA_SCORE),
OS_MONTHS = as.numeric(OS_MONTHS),
PFS_MONTHS = as.numeric(PFS_MONTHS),
SAMPLE_COUNT = as.numeric(SAMPLE_COUNT)
)
# Substituição dos NAs
na_columns <- sapply(bladder_clin, function(x) any(is.na(x)))
for (col_name in names(bladder_clin)) {
if (na_columns[col_name]) {
if (is.numeric(bladder_clin[[col_name]])) {
median_val <- median(bladder_clin[[col_name]], na.rm = TRUE)
bladder_clin[[col_name]][is.na(bladder_clin[[col_name]])] <- median_val
} else {
bladder_clin[[col_name]][is.na(bladder_clin[[col_name]])] <- "Unknown"
}
}
}
# Verificar se ainda há valores NA
summary(bladder_clin)
View(bladder_clin)
# Normalização dos dados
# Definição da função de Min-Max Scaling
# Improved Min-Max Scaling function
min_max_scaling <- function(x) {
if(all(is.na(x)) || length(unique(na.omit(x))) == 1) {
return(rep(0, length(x)))  # Retorna zeros se os valores forem NA ou iguais
}
min_val <- min(x, na.rm = TRUE)
max_val <- max(x, na.rm = TRUE)
return((x - min_val) / (max_val - min_val))
}
# Aplicação do Min-Max Scaling exclusivamente às colunas numéricas
bladder_clin <- bladder_clin %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), median(., na.rm = TRUE), .))) %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(c(RAGNUM_HYPOXIA_SCORE, WINTER_HYPOXIA_SCORE, DFS_MONTHS, ANEUPLOIDY_SCORE,
FRACTION_GENOME_ALTERED, MSI_SCORE_MANTIS, MSI_SENSOR_SCORE, MUTATION_COUNT,
TMB_NONSYNONYMOUS, AGE, BUFFA_HYPOXIA_SCORE, OS_MONTHS, PFS_MONTHS, SAMPLE_COUNT), as.numeric))
dados_mrna_df <- as.data.frame(assays(bladder)$mrna_seq_v2_rsem) %>%
mutate(across(where(is.numeric), min_max_scaling))
#######################codigo todo alterado para o novo dataset até aqui#################
View(bladder_clin)
summary(bladder_clin)
# Conversão de colunas que possuem valores numéricos (no entanto não são) para serem numéricas
# Definir as variáveis como fatores
bladder_clin <- bladder_clin %>%
mutate(
PFS_STATUS = as.factor(PFS_STATUS),
PRIOR_DX = as.factor(PRIOR_DX),
RADIATION_THERAPY = as.factor(RADIATION_THERAPY),
SEX = as.factor(SEX),
DFS_STATUS = as.factor(DFS_STATUS),
sampleId = as.factor(sampleId),
ANALYSIS_COHORT = as.factor(ANALYSIS_COHORT),
CANCER_TYPE = as.factor(CANCER_TYPE),
CANCER_TYPE_DETAILED = as.factor(CANCER_TYPE_DETAILED),
DISTANT_METS = as.factor(DISTANT_METS),
GRADE = as.factor(GRADE),
LYMPH_NODE_STATUS = as.factor(LYMPH_NODE_STATUS),
ONCOTREE_CODE = as.factor(ONCOTREE_CODE),
PRIMARY_VS_SECONDARY = as.factor(PRIMARY_VS_SECONDARY),
PRIOR_INTRAVESICAL_CHEMOTHERAPY = as.factor(PRIOR_INTRAVESICAL_CHEMOTHERAPY),
SAMPLE_TYPE = as.factor(SAMPLE_TYPE),
SOMATIC_STATUS = as.factor(SOMATIC_STATUS),
TUMOR_STAGE = as.factor(TUMOR_STAGE),
AJCC_PATHOLOGIC_TUMOR_STAGE = as.factor(AJCC_PATHOLOGIC_TUMOR_STAGE),
COHORT = as.factor(COHORT),
ETHNICITY = as.factor(ETHNICITY),
OS_STATUS = as.factor(OS_STATUS),
PATH_M_STAGE = as.factor(PATH_M_STAGE),
PATH_N_STAGE = as.factor(PATH_N_STAGE),
PATH_T_STAGE = as.factor(PATH_T_STAGE),
RACE = as.factor(RACE)
)
# Substituição dos NAs
na_columns <- sapply(bladder_clin, function(x) any(is.na(x)))
for (col_name in names(bladder_clin)) {
if (na_columns[col_name]) {
if (is.numeric(bladder_clin[[col_name]])) {
median_val <- median(bladder_clin[[col_name]], na.rm = TRUE)
bladder_clin[[col_name]][is.na(bladder_clin[[col_name]])] <- median_val
} else {
bladder_clin[[col_name]][is.na(bladder_clin[[col_name]])] <- "Unknown"
}
}
}
# Definir as variáveis como numéricas
bladder_clin <- bladder_clin %>%
mutate(
RAGNUM_HYPOXIA_SCORE = as.numeric(RAGNUM_HYPOXIA_SCORE),
WINTER_HYPOXIA_SCORE = as.numeric(WINTER_HYPOXIA_SCORE),
DFS_MONTHS = as.numeric(DFS_MONTHS),
ANEUPLOIDY_SCORE = as.numeric(ANEUPLOIDY_SCORE),
FRACTION_GENOME_ALTERED = as.numeric(FRACTION_GENOME_ALTERED),
MSI_SCORE_MANTIS = as.numeric(MSI_SCORE_MANTIS),
MSI_SENSOR_SCORE = as.numeric(MSI_SENSOR_SCORE),
MUTATION_COUNT = as.numeric(MUTATION_COUNT),
TMB_NONSYNONYMOUS = as.numeric(TMB_NONSYNONYMOUS),
AGE = as.numeric(AGE),
BUFFA_HYPOXIA_SCORE = as.numeric(BUFFA_HYPOXIA_SCORE),
OS_MONTHS = as.numeric(OS_MONTHS),
PFS_MONTHS = as.numeric(PFS_MONTHS),
SAMPLE_COUNT = as.numeric(SAMPLE_COUNT)
)
# Verificar se ainda há valores NA
summary(bladder_clin)
# Obter dados clínicos
bladder_clin <- clinicalData(api = cbio, studyId = "blca_msk_tcga_2020")
dim(bladder_clin)  # Deve retornar 476 linhas e 42 colunas
# Carrega os dados do cBioPortal
bladder = cBioDataPack("blca_msk_tcga_2020", ask = FALSE)
# Lista os nomes dos ensaios disponíveis no pacote dos dados do CBioPortal
names(assays(bladder))
names(colData(bladder)) # tipos de metadados associados a cada amostra
# Summary dos dados
summary(bladder)
# Definição da função de Min-Max Scaling
min_max_scaling <- function(x) {
min_val <- min(x, na.rm = TRUE)
max_val <- max(x, na.rm = TRUE)
if(min_val == max_val) return(rep(0, length(x)))
(x - min_val) / (max_val - min_val)
}
# Aplicação do Min-Max Scaling às colunas numéricas
bladder_clin <- bladder_clin %>%
mutate(across(where(is.numeric), min_max_scaling))
# Tratamento de NAs e transformação de dados categóricos
bladder_clin <- bladder_clin %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), median(., na.rm = TRUE), .)))
# Consulta dos dados de mrna e conversão em dataframe.
dados_mrna_df <- as.data.frame(assays(bladder)$mrna_seq_v2_rsem) %>%
mutate(across(where(is.numeric), min_max_scaling))
# Conversão de colunas que possuem valores numéricos (no entanto não são) para serem numéricas
# Definir as variáveis como numéricas
bladder_clin <- bladder_clin %>%
mutate(
RAGNUM_HYPOXIA_SCORE = as.numeric(RAGNUM_HYPOXIA_SCORE),
WINTER_HYPOXIA_SCORE = as.numeric(WINTER_HYPOXIA_SCORE),
DFS_MONTHS = as.numeric(DFS_MONTHS),
ANEUPLOIDY_SCORE = as.numeric(ANEUPLOIDY_SCORE),
FRACTION_GENOME_ALTERED = as.numeric(FRACTION_GENOME_ALTERED),
MSI_SCORE_MANTIS = as.numeric(MSI_SCORE_MANTIS),
MSI_SENSOR_SCORE = as.numeric(MSI_SENSOR_SCORE),
MUTATION_COUNT = as.numeric(MUTATION_COUNT),
TMB_NONSYNONYMOUS = as.numeric(TMB_NONSYNONYMOUS),
AGE = as.numeric(AGE),
BUFFA_HYPOXIA_SCORE = as.numeric(BUFFA_HYPOXIA_SCORE),
OS_MONTHS = as.numeric(OS_MONTHS),
PFS_MONTHS = as.numeric(PFS_MONTHS),
SAMPLE_COUNT = as.numeric(SAMPLE_COUNT)
)
# Substitui-se os NAs das colunas numéricas pela mediana de cada coluna e os NAs das não numéricas por "Unknown"
# Substituição dos NAs
na_columns <- sapply(bladder_clin, function(x) any(is.na(x)))
for (col_name in names(bladder_clin)) {
if (na_columns[col_name]) {
if (is.numeric(bladder_clin[[col_name]])) {
median_val <- median(bladder_clin[[col_name]], na.rm = TRUE)
bladder_clin[[col_name]][is.na(bladder_clin[[col_name]])] <- median_val
} else {
bladder_clin[[col_name]][is.na(bladder_clin[[col_name]])] <- "Unknown"
}
}
}
# Tendo os NAs substituidos, podemos agora definir variáveis como fatores
# Definir as variáveis como fatores
bladder_clin <- bladder_clin %>%
mutate(
PFS_STATUS = as.factor(PFS_STATUS),
PRIOR_DX = as.factor(PRIOR_DX),
RADIATION_THERAPY = as.factor(RADIATION_THERAPY),
SEX = as.factor(SEX),
DFS_STATUS = as.factor(DFS_STATUS),
sampleId = as.factor(sampleId),
ANALYSIS_COHORT = as.factor(ANALYSIS_COHORT),
CANCER_TYPE = as.factor(CANCER_TYPE),
CANCER_TYPE_DETAILED = as.factor(CANCER_TYPE_DETAILED),
DISTANT_METS = as.factor(DISTANT_METS),
GRADE = as.factor(GRADE),
LYMPH_NODE_STATUS = as.factor(LYMPH_NODE_STATUS),
ONCOTREE_CODE = as.factor(ONCOTREE_CODE),
PRIMARY_VS_SECONDARY = as.factor(PRIMARY_VS_SECONDARY),
PRIOR_INTRAVESICAL_CHEMOTHERAPY = as.factor(PRIOR_INTRAVESICAL_CHEMOTHERAPY),
SAMPLE_TYPE = as.factor(SAMPLE_TYPE),
SOMATIC_STATUS = as.factor(SOMATIC_STATUS),
TUMOR_STAGE = as.factor(TUMOR_STAGE),
AJCC_PATHOLOGIC_TUMOR_STAGE = as.factor(AJCC_PATHOLOGIC_TUMOR_STAGE),
COHORT = as.factor(COHORT),
ETHNICITY = as.factor(ETHNICITY),
OS_STATUS = as.factor(OS_STATUS),
PATH_M_STAGE = as.factor(PATH_M_STAGE),
PATH_N_STAGE = as.factor(PATH_N_STAGE),
PATH_T_STAGE = as.factor(PATH_T_STAGE),
RACE = as.factor(RACE)
)
# Verificar se ainda há valores NA
summary(bladder_clin)
View(bladder_clin)
# Obter dados clínicos
bladder_clin <- clinicalData(api = cbio, studyId = "blca_msk_tcga_2020")
dim(bladder_clin)  # Deve retornar 476 linhas e 42 colunas
# Carrega os dados do cBioPortal
bladder = cBioDataPack("blca_msk_tcga_2020", ask = FALSE)
# Lista os nomes dos ensaios disponíveis no pacote dos dados do CBioPortal
names(assays(bladder))
names(colData(bladder)) # tipos de metadados associados a cada amostra
# Summary dos dados
summary(bladder)
# Consulta dos dados de mrna e conversão em dataframe.
dados_mrna_df <- as.data.frame(assays(bladder)$mrna_seq_v2_rsem) %>%
mutate(across(where(is.numeric), min_max_scaling))
# Conversão de colunas que possuem valores numéricos (no entanto não são) para serem numéricas
# Definir as variáveis como numéricas
bladder_clin <- bladder_clin %>%
mutate(
RAGNUM_HYPOXIA_SCORE = as.numeric(RAGNUM_HYPOXIA_SCORE),
WINTER_HYPOXIA_SCORE = as.numeric(WINTER_HYPOXIA_SCORE),
DFS_MONTHS = as.numeric(DFS_MONTHS),
ANEUPLOIDY_SCORE = as.numeric(ANEUPLOIDY_SCORE),
FRACTION_GENOME_ALTERED = as.numeric(FRACTION_GENOME_ALTERED),
MSI_SCORE_MANTIS = as.numeric(MSI_SCORE_MANTIS),
MSI_SENSOR_SCORE = as.numeric(MSI_SENSOR_SCORE),
MUTATION_COUNT = as.numeric(MUTATION_COUNT),
TMB_NONSYNONYMOUS = as.numeric(TMB_NONSYNONYMOUS),
AGE = as.numeric(AGE),
BUFFA_HYPOXIA_SCORE = as.numeric(BUFFA_HYPOXIA_SCORE),
OS_MONTHS = as.numeric(OS_MONTHS),
PFS_MONTHS = as.numeric(PFS_MONTHS),
SAMPLE_COUNT = as.numeric(SAMPLE_COUNT)
)
# Substitui-se os NAs das colunas numéricas pela mediana de cada coluna e os NAs das não numéricas por "Unknown"
# Substituição dos NAs
na_columns <- sapply(bladder_clin, function(x) any(is.na(x)))
for (col_name in names(bladder_clin)) {
if (na_columns[col_name]) {
if (is.numeric(bladder_clin[[col_name]])) {
median_val <- median(bladder_clin[[col_name]], na.rm = TRUE)
bladder_clin[[col_name]][is.na(bladder_clin[[col_name]])] <- median_val
} else {
bladder_clin[[col_name]][is.na(bladder_clin[[col_name]])] <- "Unknown"
}
}
}
# Tendo os NAs substituidos, podemos agora definir variáveis como fatores
# Definir as variáveis como fatores
bladder_clin <- bladder_clin %>%
mutate(
PFS_STATUS = as.factor(PFS_STATUS),
PRIOR_DX = as.factor(PRIOR_DX),
RADIATION_THERAPY = as.factor(RADIATION_THERAPY),
SEX = as.factor(SEX),
DFS_STATUS = as.factor(DFS_STATUS),
sampleId = as.factor(sampleId),
ANALYSIS_COHORT = as.factor(ANALYSIS_COHORT),
CANCER_TYPE = as.factor(CANCER_TYPE),
CANCER_TYPE_DETAILED = as.factor(CANCER_TYPE_DETAILED),
DISTANT_METS = as.factor(DISTANT_METS),
GRADE = as.factor(GRADE),
LYMPH_NODE_STATUS = as.factor(LYMPH_NODE_STATUS),
ONCOTREE_CODE = as.factor(ONCOTREE_CODE),
PRIMARY_VS_SECONDARY = as.factor(PRIMARY_VS_SECONDARY),
PRIOR_INTRAVESICAL_CHEMOTHERAPY = as.factor(PRIOR_INTRAVESICAL_CHEMOTHERAPY),
SAMPLE_TYPE = as.factor(SAMPLE_TYPE),
SOMATIC_STATUS = as.factor(SOMATIC_STATUS),
TUMOR_STAGE = as.factor(TUMOR_STAGE),
AJCC_PATHOLOGIC_TUMOR_STAGE = as.factor(AJCC_PATHOLOGIC_TUMOR_STAGE),
COHORT = as.factor(COHORT),
ETHNICITY = as.factor(ETHNICITY),
OS_STATUS = as.factor(OS_STATUS),
PATH_M_STAGE = as.factor(PATH_M_STAGE),
PATH_N_STAGE = as.factor(PATH_N_STAGE),
PATH_T_STAGE = as.factor(PATH_T_STAGE),
RACE = as.factor(RACE)
)
# Verificar se ainda há valores NA
summary(bladder_clin)
View(bladder_clin)
# Obter dados clínicos
bladder_clin <- clinicalData(api = cbio, studyId = "blca_msk_tcga_2020")
dim(bladder_clin)  # Deve retornar 476 linhas e 42 colunas
# Carrega os dados do cBioPortal
bladder = cBioDataPack("blca_msk_tcga_2020", ask = FALSE)
# Lista os nomes dos ensaios disponíveis no pacote dos dados do CBioPortal
names(assays(bladder))
names(colData(bladder)) # tipos de metadados associados a cada amostra
# Summary dos dados
summary(bladder)
# Definição da função de Min-Max Scaling
min_max_scaling <- function(x) {
min_val <- min(x, na.rm = TRUE)
max_val <- max(x, na.rm = TRUE)
if(min_val == max_val) return(rep(0, length(x)))
(x - min_val) / (max_val - min_val)
}
# Aplicação do Min-Max Scaling às colunas numéricas
bladder_clin <- bladder_clin %>%
mutate(across(where(is.numeric), min_max_scaling))
# Tratamento de NAs e transformação de dados categóricos
bladder_clin <- bladder_clin %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), median(., na.rm = TRUE), .)))
# Consulta dos dados de mrna e conversão em dataframe.
dados_mrna_df <- as.data.frame(assays(bladder)$mrna_seq_v2_rsem) %>%
mutate(across(where(is.numeric), min_max_scaling))
# Conversão de colunas que possuem valores numéricos (no entanto não são) para serem numéricas
# Definir as variáveis como numéricas
bladder_clin <- bladder_clin %>%
mutate(
RAGNUM_HYPOXIA_SCORE = as.numeric(RAGNUM_HYPOXIA_SCORE),
WINTER_HYPOXIA_SCORE = as.numeric(WINTER_HYPOXIA_SCORE),
DFS_MONTHS = as.numeric(DFS_MONTHS),
ANEUPLOIDY_SCORE = as.numeric(ANEUPLOIDY_SCORE),
FRACTION_GENOME_ALTERED = as.numeric(FRACTION_GENOME_ALTERED),
MSI_SCORE_MANTIS = as.numeric(MSI_SCORE_MANTIS),
MSI_SENSOR_SCORE = as.numeric(MSI_SENSOR_SCORE),
MUTATION_COUNT = as.numeric(MUTATION_COUNT),
TMB_NONSYNONYMOUS = as.numeric(TMB_NONSYNONYMOUS),
AGE = as.numeric(AGE),
BUFFA_HYPOXIA_SCORE = as.numeric(BUFFA_HYPOXIA_SCORE),
OS_MONTHS = as.numeric(OS_MONTHS),
PFS_MONTHS = as.numeric(PFS_MONTHS),
SAMPLE_COUNT = as.numeric(SAMPLE_COUNT)
)
# Substitui-se os NAs das colunas numéricas pela mediana de cada coluna e os NAs das não numéricas por "Unknown"
# Substituição dos NAs
na_columns <- sapply(bladder_clin, function(x) any(is.na(x)))
for (col_name in names(bladder_clin)) {
if (na_columns[col_name]) {
if (is.numeric(bladder_clin[[col_name]])) {
median_val <- median(bladder_clin[[col_name]], na.rm = TRUE)
bladder_clin[[col_name]][is.na(bladder_clin[[col_name]])] <- median_val
} else {
bladder_clin[[col_name]][is.na(bladder_clin[[col_name]])] <- "Unknown"
}
}
}
# Tendo os NAs substituidos, podemos agora definir variáveis como fatores
# Definir as variáveis como fatores
bladder_clin <- bladder_clin %>%
mutate(
PFS_STATUS = as.factor(PFS_STATUS),
PRIOR_DX = as.factor(PRIOR_DX),
RADIATION_THERAPY = as.factor(RADIATION_THERAPY),
SEX = as.factor(SEX),
DFS_STATUS = as.factor(DFS_STATUS),
sampleId = as.factor(sampleId),
ANALYSIS_COHORT = as.factor(ANALYSIS_COHORT),
CANCER_TYPE = as.factor(CANCER_TYPE),
CANCER_TYPE_DETAILED = as.factor(CANCER_TYPE_DETAILED),
DISTANT_METS = as.factor(DISTANT_METS),
GRADE = as.factor(GRADE),
LYMPH_NODE_STATUS = as.factor(LYMPH_NODE_STATUS),
ONCOTREE_CODE = as.factor(ONCOTREE_CODE),
PRIMARY_VS_SECONDARY = as.factor(PRIMARY_VS_SECONDARY),
PRIOR_INTRAVESICAL_CHEMOTHERAPY = as.factor(PRIOR_INTRAVESICAL_CHEMOTHERAPY),
SAMPLE_TYPE = as.factor(SAMPLE_TYPE),
SOMATIC_STATUS = as.factor(SOMATIC_STATUS),
TUMOR_STAGE = as.factor(TUMOR_STAGE),
AJCC_PATHOLOGIC_TUMOR_STAGE = as.factor(AJCC_PATHOLOGIC_TUMOR_STAGE),
COHORT = as.factor(COHORT),
ETHNICITY = as.factor(ETHNICITY),
OS_STATUS = as.factor(OS_STATUS),
PATH_M_STAGE = as.factor(PATH_M_STAGE),
PATH_N_STAGE = as.factor(PATH_N_STAGE),
PATH_T_STAGE = as.factor(PATH_T_STAGE),
RACE = as.factor(RACE)
)
# Verificar se ainda há valores NA
summary(bladder_clin)
View(bladder_clin)
# Obter dados clínicos
bladder_clin <- clinicalData(api = cbio, studyId = "blca_msk_tcga_2020")
dim(bladder_clin)  # Deve retornar 476 linhas e 42 colunas
# Carrega os dados do cBioPortal
bladder = cBioDataPack("blca_msk_tcga_2020", ask = FALSE)
# Lista os nomes dos ensaios disponíveis no pacote dos dados do CBioPortal
names(assays(bladder))
names(colData(bladder)) # tipos de metadados associados a cada amostra
# Summary dos dados
summary(bladder)
# Consulta dos dados de mrna e conversão em dataframe.
dados_mrna_df <- as.data.frame(assays(bladder)$mrna_seq_v2_rsem) %>%
mutate(across(where(is.numeric), min_max_scaling))
# Conversão de colunas que possuem valores numéricos (no entanto não são) para serem numéricas
# Definir as variáveis como numéricas
bladder_clin <- bladder_clin %>%
mutate(
RAGNUM_HYPOXIA_SCORE = as.numeric(RAGNUM_HYPOXIA_SCORE),
WINTER_HYPOXIA_SCORE = as.numeric(WINTER_HYPOXIA_SCORE),
DFS_MONTHS = as.numeric(DFS_MONTHS),
ANEUPLOIDY_SCORE = as.numeric(ANEUPLOIDY_SCORE),
FRACTION_GENOME_ALTERED = as.numeric(FRACTION_GENOME_ALTERED),
MSI_SCORE_MANTIS = as.numeric(MSI_SCORE_MANTIS),
MSI_SENSOR_SCORE = as.numeric(MSI_SENSOR_SCORE),
MUTATION_COUNT = as.numeric(MUTATION_COUNT),
TMB_NONSYNONYMOUS = as.numeric(TMB_NONSYNONYMOUS),
AGE = as.numeric(AGE),
BUFFA_HYPOXIA_SCORE = as.numeric(BUFFA_HYPOXIA_SCORE),
OS_MONTHS = as.numeric(OS_MONTHS),
PFS_MONTHS = as.numeric(PFS_MONTHS),
SAMPLE_COUNT = as.numeric(SAMPLE_COUNT)
)
# Substitui-se os NAs das colunas numéricas pela mediana de cada coluna e os NAs das não numéricas por "Unknown"
# Substituição dos NAs
na_columns <- sapply(bladder_clin, function(x) any(is.na(x)))
for (col_name in names(bladder_clin)) {
if (na_columns[col_name]) {
if (is.numeric(bladder_clin[[col_name]])) {
median_val <- median(bladder_clin[[col_name]], na.rm = TRUE)
bladder_clin[[col_name]][is.na(bladder_clin[[col_name]])] <- median_val
} else {
bladder_clin[[col_name]][is.na(bladder_clin[[col_name]])] <- "Unknown"
}
}
}
# Tendo os NAs substituidos, podemos agora definir variáveis como fatores
# Definir as variáveis como fatores
bladder_clin <- bladder_clin %>%
mutate(
PFS_STATUS = as.factor(PFS_STATUS),
PRIOR_DX = as.factor(PRIOR_DX),
RADIATION_THERAPY = as.factor(RADIATION_THERAPY),
SEX = as.factor(SEX),
DFS_STATUS = as.factor(DFS_STATUS),
sampleId = as.factor(sampleId),
ANALYSIS_COHORT = as.factor(ANALYSIS_COHORT),
CANCER_TYPE = as.factor(CANCER_TYPE),
CANCER_TYPE_DETAILED = as.factor(CANCER_TYPE_DETAILED),
DISTANT_METS = as.factor(DISTANT_METS),
GRADE = as.factor(GRADE),
LYMPH_NODE_STATUS = as.factor(LYMPH_NODE_STATUS),
ONCOTREE_CODE = as.factor(ONCOTREE_CODE),
PRIMARY_VS_SECONDARY = as.factor(PRIMARY_VS_SECONDARY),
PRIOR_INTRAVESICAL_CHEMOTHERAPY = as.factor(PRIOR_INTRAVESICAL_CHEMOTHERAPY),
SAMPLE_TYPE = as.factor(SAMPLE_TYPE),
SOMATIC_STATUS = as.factor(SOMATIC_STATUS),
TUMOR_STAGE = as.factor(TUMOR_STAGE),
AJCC_PATHOLOGIC_TUMOR_STAGE = as.factor(AJCC_PATHOLOGIC_TUMOR_STAGE),
COHORT = as.factor(COHORT),
ETHNICITY = as.factor(ETHNICITY),
OS_STATUS = as.factor(OS_STATUS),
PATH_M_STAGE = as.factor(PATH_M_STAGE),
PATH_N_STAGE = as.factor(PATH_N_STAGE),
PATH_T_STAGE = as.factor(PATH_T_STAGE),
RACE = as.factor(RACE)
)
# Verificar se ainda há valores NA, se o código correu bem, a
summary(bladder_clin)
# Normalização dos dados
# Definição da função de Min-Max Scaling
# Improved Min-Max Scaling function
min_max_scaling <- function(x) {
if(all(is.na(x)) || length(unique(na.omit(x))) == 1) {
return(rep(0, length(x)))  # Retorna zeros se os valores forem NA ou iguais
}
min_val <- min(x, na.rm = TRUE)
max_val <- max(x, na.rm = TRUE)
return((x - min_val) / (max_val - min_val))
}
# Aplicação do Min-Max Scaling exclusivamente às colunas numéricas
bladder_clin <- bladder_clin %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), median(., na.rm = TRUE), .))) %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(c(RAGNUM_HYPOXIA_SCORE, WINTER_HYPOXIA_SCORE, DFS_MONTHS, ANEUPLOIDY_SCORE,
FRACTION_GENOME_ALTERED, MSI_SCORE_MANTIS, MSI_SENSOR_SCORE, MUTATION_COUNT,
TMB_NONSYNONYMOUS, AGE, BUFFA_HYPOXIA_SCORE, OS_MONTHS, PFS_MONTHS, SAMPLE_COUNT), as.numeric))
dados_mrna_df <- as.data.frame(assays(bladder)$mrna_seq_v2_rsem) %>%
mutate(across(where(is.numeric), min_max_scaling))
#######################codigo todo alterado para o novo dataset até aqui#################
View(bladder_clin)
View(bladder_clin)
